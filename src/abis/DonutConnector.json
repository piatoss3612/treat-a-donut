{
  "contractName": "DonutConnector",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DonutBoxActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DonutBoxDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DonutSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DONUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DonutBoxActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DonutBoxDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DonutSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DONUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/DonutConnector.sol\":\"DonutConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/src/contracts/Accounts.sol\":{\"keccak256\":\"0x7c30cd709d8a797a3efe67280001456a76434c7b7e0c92619d0e050c615338fb\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://ea62a640d0258abc70c58a2f6493387fd4a3fb01d39f7f5b69985c5b70f49728\",\"dweb:/ipfs/Qmdgu6QbajrDVCUrThKDgFkwdYDpTwBv64c4brRZx1SvGK\"]},\"project:/src/contracts/DonutConnector.sol\":{\"keccak256\":\"0x5e804fc2baeaaddea0dac7d6046e94687b3b538501565c770988f867a3fdb449\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://5b5b7e57f5a3c8069a26050c0db301ec653996880c270ba19dec5a9f96d1cbc8\",\"dweb:/ipfs/QmZxr7AvkD94zki3N6B4TjmvLiX5tT9qgqpvEidpKsYDEn\"]},\"project:/src/contracts/account/DonutBox.sol\":{\"keccak256\":\"0x9a4b77aa9a685e31409be350dd1347dcba8511029854f6c90379bf0e6c7c584d\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://63286d4b0196c44fe828d10aa1ed6bd0b68ccee43dc654b4d2ad7de633b81a73\",\"dweb:/ipfs/QmXDceRiVRSNDXnjCaP6EZPs8t7nFRSqU4i7FE5WJeqVyg\"]},\"project:/src/contracts/account/User.sol\":{\"keccak256\":\"0xa659797735420e690a98f1ecb3e73279d2787e5440571fc3dcdde15a3cfcd50d\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d26e02c42a96c1fb8693f0a71fead6ebd8a5b25e27ed6a649995e461d157abc4\",\"dweb:/ipfs/QmW66waDmmByijGiMRhUX6gstne6pJkopsRjkATbqCmTFB\"]},\"project:/src/contracts/donation/Support.sol\":{\"keccak256\":\"0xf4a69bd24f37b2a58c157ad624df22bc8436bff0ac54670239f13bce72cad4da\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://10ca540f5db768f067d40d05ba33d1c52e4e64216b7765a990f88b07a2f69829\",\"dweb:/ipfs/QmTbZWnFEphtG8Q2zFLxaCYwcv3LBfNezfTNviRA8NiBxm\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e7df8ab514602d575b600080fd5b60336047565b604051603e91906069565b60405180910390f35b660aa87bee53800081565b6000819050919050565b6063816052565b82525050565b6000602082019050607c6000830184605c565b9291505056fea26469706673582212200f38d698fe0f40de26cd027e6a7b83db94ada27954bad56146c48c66b514663b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063e7df8ab514602d575b600080fd5b60336047565b604051603e91906069565b60405180910390f35b660aa87bee53800081565b6000819050919050565b6063816052565b82525050565b6000602082019050607c6000830184605c565b9291505056fea26469706673582212200f38d698fe0f40de26cd027e6a7b83db94ada27954bad56146c48c66b514663b64736f6c63430008110033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:439:8",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "52:32:8",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "62:16:8",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "73:5:8"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "62:7:8"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "34:5:8",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "44:7:8",
                "type": ""
              }
            ],
            "src": "7:77:8"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "155:53:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "172:3:8"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "195:5:8"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_uint256",
                          "nodeType": "YulIdentifier",
                          "src": "177:17:8"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "177:24:8"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "165:6:8"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "165:37:8"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "165:37:8"
                }
              ]
            },
            "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "143:5:8",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "150:3:8",
                "type": ""
              }
            ],
            "src": "90:118:8"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "312:124:8",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "322:26:8",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "334:9:8"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "345:2:8",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "330:3:8"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "330:18:8"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "322:4:8"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "402:6:8"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "415:9:8"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "426:1:8",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "411:3:8"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "411:17:8"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "358:43:8"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "358:71:8"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "358:71:8"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "284:9:8",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "296:6:8",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "307:4:8",
                "type": ""
              }
            ],
            "src": "214:222:8"
          }
        ]
      },
      "contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
      "id": 8,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "169:388:1:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "169:388:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;182:43:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;214:11;182:43;:::o;7:77:8:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o",
  "source": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./donation/Support.sol\";\r\nimport \"./Accounts.sol\";\r\n\r\nerror BaseFeeExceptionOverflow();\r\n\r\ncontract DonutConnector is Accounts, Support {\r\n    function _transferExceptFee(\r\n        address _to,\r\n        uint256 _payment\r\n    ) internal virtual {\r\n        unchecked {\r\n            uint256 fee = _calculateBaseFee(_payment);\r\n            if (fee > _payment) revert BaseFeeExceptionOverflow();\r\n            _payment -= fee;\r\n            _deposit(_to, _payment);\r\n        }\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Users\\LHH\\treat-a-donut\\src\\contracts\\DonutConnector.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/DonutConnector.sol",
    "exportedSymbols": {
      "Accounts": [
        103
      ],
      "BalanceDepositOverflow": [
        511
      ],
      "BalanceWithdrawOverflow": [
        513
      ],
      "BaseFeeCalculationToZero": [
        932
      ],
      "BaseFeeExceptionOverflow": [
        109
      ],
      "DonutBox": [
        699
      ],
      "DonutConnector": [
        145
      ],
      "Support": [
        1186
      ],
      "TotalPaymentCalculationOverflow": [
        930
      ],
      "User": [
        851
      ],
      "UserIndexToAddressNotMatched": [
        703
      ]
    },
    "id": 146,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 105,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:24:1"
      },
      {
        "absolutePath": "project:/src/contracts/donation/Support.sol",
        "file": "./donation/Support.sol",
        "id": 106,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 146,
        "sourceUnit": 1187,
        "src": "70:32:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/src/contracts/Accounts.sol",
        "file": "./Accounts.sol",
        "id": 107,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 146,
        "sourceUnit": 104,
        "src": "104:24:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "errorSelector": "d3bbb1f3",
        "id": 109,
        "name": "BaseFeeExceptionOverflow",
        "nameLocation": "138:24:1",
        "nodeType": "ErrorDefinition",
        "parameters": {
          "id": 108,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "162:2:1"
        },
        "src": "132:33:1"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 110,
              "name": "Accounts",
              "nameLocations": [
                "196:8:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 103,
              "src": "196:8:1"
            },
            "id": 111,
            "nodeType": "InheritanceSpecifier",
            "src": "196:8:1"
          },
          {
            "baseName": {
              "id": 112,
              "name": "Support",
              "nameLocations": [
                "206:7:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1186,
              "src": "206:7:1"
            },
            "id": 113,
            "nodeType": "InheritanceSpecifier",
            "src": "206:7:1"
          }
        ],
        "canonicalName": "DonutConnector",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 145,
        "linearizedBaseContracts": [
          145,
          1186,
          103,
          699,
          851
        ],
        "name": "DonutConnector",
        "nameLocation": "178:14:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 143,
              "nodeType": "Block",
              "src": "322:232:1",
              "statements": [
                {
                  "id": 142,
                  "nodeType": "UncheckedBlock",
                  "src": "333:214:1",
                  "statements": [
                    {
                      "assignments": [
                        121
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 121,
                          "mutability": "mutable",
                          "name": "fee",
                          "nameLocation": "366:3:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 142,
                          "src": "358:11:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 120,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "358:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 125,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 123,
                            "name": "_payment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 117,
                            "src": "390:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 122,
                          "name": "_calculateBaseFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1020,
                          "src": "372:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) pure returns (uint256)"
                          }
                        },
                        "id": 124,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "372:27:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "358:41:1"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 128,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 126,
                          "name": "fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 121,
                          "src": "418:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "id": 127,
                          "name": "_payment",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 117,
                          "src": "424:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "418:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 132,
                      "nodeType": "IfStatement",
                      "src": "414:53:1",
                      "trueBody": {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 129,
                            "name": "BaseFeeExceptionOverflow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 109,
                            "src": "441:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "441:26:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 131,
                        "nodeType": "RevertStatement",
                        "src": "434:33:1"
                      }
                    },
                    {
                      "expression": {
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 133,
                          "name": "_payment",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 117,
                          "src": "482:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "id": 134,
                          "name": "fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 121,
                          "src": "494:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "482:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 136,
                      "nodeType": "ExpressionStatement",
                      "src": "482:15:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 138,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 115,
                            "src": "521:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 139,
                            "name": "_payment",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 117,
                            "src": "526:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 137,
                          "name": "_deposit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 640,
                          "src": "512:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 140,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "512:23:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 141,
                      "nodeType": "ExpressionStatement",
                      "src": "512:23:1"
                    }
                  ]
                }
              ]
            },
            "id": 144,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transferExceptFee",
            "nameLocation": "230:18:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 118,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 115,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "267:3:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 144,
                  "src": "259:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 114,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "259:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 117,
                  "mutability": "mutable",
                  "name": "_payment",
                  "nameLocation": "289:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 144,
                  "src": "281:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 116,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "281:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "248:56:1"
            },
            "returnParameters": {
              "id": 119,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "322:0:1"
            },
            "scope": 145,
            "src": "221:333:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 146,
        "src": "169:388:1",
        "usedErrors": []
      }
    ],
    "src": "42:517:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.10",
  "updatedAt": "2022-12-03T16:26:35.172Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}